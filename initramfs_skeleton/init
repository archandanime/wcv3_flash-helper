#!/bin/sh
#
#Config file format:
#
#backup_partitions="no"
#restore_partitions="yes"
#
#continue_boot_img_filename="factory_t31_ZMC6tiIDQN_backup"
#
#kernel_filename="mtdblock1_kernel"
#rootfs_filename="mtdblock2_rootfs"
#app_filename="mtdblock3_app"
#kback_filename="mtdblock4_kback"
#aback_filename="mtdblock5_aback"
#cfg_filename="mtdblock6_cfg"
#para_filename="mtdblock7_para"
#
#restore_kernel="yes"
#restore_rootfs="yes"
#restore_app="yes"
#restore_kback="no"
#restore_aback="yes"
#restore_cfg="no"
#restore_para="no"
#
#custom_script="/path-to/custom-script.sh"
#
#

exec > /tmp/initramfs.log 2>&1


mount -t devtmpfs devtmpfs /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys

sleep 1

##### INITIALIZE GPIO FOR LEDS #####
if ! [ -d /sys/class/gpio/gpio38 ]; then
	echo 38 > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio38/direction
	echo 1 > /sys/class/gpio/gpio38/value
fi

if ! [ -d /sys/class/gpio/gpio39 ]; then
	echo 39 > /sys/class/gpio/export
	echo out > /sys/class/gpio/gpio39/direction
	echo 1 > /sys/class/gpio/gpio39/value
fi


mkdir /sdcard
mount -t vfat /dev/mmcblk0p1 /sdcard -o rw,umask=0000,dmask=0000


function get_mtd() {
	case "$1" in
		"kernel" )
			echo -n "/dev/mtd1" ;;
		"rootfs" )
			echo -n "/dev/mtd2" ;;
		"app" )
			echo -n "/dev/mtd3" ;;
		"kback" )
			echo -n "/dev/mtd4" ;;
		"aback" )
			echo -n "/dev/mtd5" ;;
		"cfg" )
			echo -n "/dev/mtd6" ;;
		"para" )
			echo -n "/dev/mtd7" ;;
	esac
}

function get_mtdblock() {
	case "$1" in
		"kernel" )
			echo -n "/dev/mtdblock1" ;;
		"rootfs" )
			echo -n "/dev/mtdblock2" ;;
		"app" )
			echo -n "/dev/mtdblock3" ;;
		"kback" )
			echo -n "/dev/mtdblock4" ;;
		"aback" )
			echo -n "/dev/mtdblock5" ;;
		"cfg" )
			echo -n "/dev/mtdblock6" ;;
		"para" )
			echo -n "/dev/mtdblock7" ;;
	esac
}

function get_filename() {
	case "$1" in
		"kernel" )
			echo -n "$kernel_filename" ;;
		"rootfs" )
			echo -n "$rootfs_filename" ;;
		"app" )
			echo -n "$app_filename" ;;
		"kback" )
			echo -n "$kback_filename" ;;
		"aback" )
			echo -n "$aback_filename" ;;
		"cfg" )
			echo -n "$cfg_filename" ;;
		"para" )
			echo -n "$para_filename" ;;
	esac
}

function get_restore_opt_value() {
	case "$1" in
		"kernel" )
			echo -n "$restore_kernel" ;;
		"rootfs" )
			echo -n "$restore_rootfs" ;;
		"app" )
			echo -n "$restore_app" ;;
		"kback" )
			echo -n "$restore_kback" ;;
		"aback" )
			echo -n "$restore_aback" ;;
		"cfg" )
			echo -n "$restore_cfg" ;;
		"para" )
			echo -n "$restore_para" ;;
	esac
}


msg() {
	message="$1"
	echo "$message"
	echo "$message" > /dev/console
}

msg_nonewline() {
	message="$1"
	echo -n "$message"
	echo -n "$message" > /dev/console
}

function restore_file_to_partition() {
# Syntax: restore_file_to_partition <file> <mtd>
	local restore_file="$1"
	local mtd="$2"

	[[ ! -f $restore_file ]] && { msg " + $restore_file is missing" ; return 1 ; }
	if [[ "$dry_run" == "yes" ]]; then
		msg_nonewline " + Checking md5 of $restore_file: "
		md5sum -c $restore_file.md5sum && msg " + (this command is not run) flashcp $restore_file $mtd"
	else
		msg_nonewline " + Checking md5 of $restore_file: "
		md5sum -c $restore_file.md5sum && flashcp $restore_file $mtd || { msg " + md5 checksum for $restore_file failed" ; return 1 ; }
	fi
}


function backup_partition_to_file() {
# Syntax: backup_partition_to_file <mtdblock> <file>
	local mtdblock="$1"
	local backup_file="$2"

	if [[ ! -f $backup_file ]]; then
		msg " + Making backup for $partition partition"
		if [[ "$dry_run" == "yes" ]]; then
			msg " + (this command is not run) dd if=$mtdblock of=$backup_file"
			msg " + (this command is not run) md5sum $backup_file > $backup_file.md5sum"
		else
			dd if=$mtdblock of=$backup_file || { msg " + Failed to back up $mtdblock" ; return 1 ; }
			md5sum $backup_file > $backup_file.md5sum
		fi
	else
		msg " + $backup_file file exists"
	fi
	msg
}

function exit_init() {
	msg "Renaming /sdcard/factory_t31_ZMC6tiIDQN to /sdcard/factory_t31_ZMC6tiIDQN.$installer_name"
	mv /sdcard/factory_t31_ZMC6tiIDQN /sdcard/factory_t31_ZMC6tiIDQN.$installer_name

	if [[ -f /sdcard/$continue_boot_img_filename ]]; then
		msg "Renaming /sdcard/$continue_boot_img_filename to /sdcard/factory_t31_ZMC6tiIDQN"
		mv /sdcard/$continue_boot_img_filename /sdcard/factory_t31_ZMC6tiIDQN
	else
		msg "/sdcard/$continue_boot_img_filename file is missing"
	fi

	msg
	msg "Initramfs init is finished! Exiting now"
	[[ -f /tmp/initramfs.log ]] && cp /tmp/initramfs.log $log_file
	[[ -f /tmp/initramfs_no-config-error.log ]] && cp /tmp/initramfs.log $log_file_fallback
	sync
	umount /sdcard
	sleep 1
	exit # Force a reboot by crashing init
}




installer_name="wcv3_flash-helper"
backup_dir_name="backup"
backup_dir_path="/sdcard/wcv3_flash-helper/backup/"
restore_dir_name="restore"
restore_dir_path="/sdcard/wcv3_flash-helper/restore/"
config_file="/sdcard/wcv3_flash-helper/wcv3_flash-helper.conf"
log_file="/sdcard/wcv3_flash-helper/wcv3_flash-helper.log"
log_file_fallback="/sdcard/wcv3_flash-helper_no-config-error.log"


##### DEBUG #####
msg
msg
echo "Press any key to interupt init" > /dev/console
msg
msg
exec 0< /dev/console
read -r -s -n 1 -t 3
if [[ "$?" -eq 0 ]]; then
	echo "Dropping a shell"
	exec 1> /dev/console
	exec 2> /dev/console
	exec /bin/sh
fi
echo "Selection has timed out" > /dev/console
msg
msg
msg
msg "Welcome to $installer_name!"


##### CHECK FOR ERRORS #####
if [[ ! -f $config_file ]]; then
	{ msg "$config_file file is missing" ; mv /tmp/initramfs.log /tmp/initramfs_no-config-error.log ; exit_init ; }
else
	msg "$config_file file is found"
fi

dos2unix $config_file
source $config_file || { msg "$config_file file is invalid" ; exit_init ; }


##### BACKUP #####
msg
msg
if [[ "${backup_partitions}" == "yes" ]]; then
	msg "backup_partitions value is Yes"
	/blink_blue_led.sh &
	blue_led_pid="$!"
	msg
	msg "---------- Begin of backup operations ----------"
	for partition in kernel rootfs app kback aback cfg para; do
		[[ ! -d $backup_dir_path ]] && mkdir $backup_dir_path
		filename=$(get_filename $partition)
		mtdblock=$(get_mtdblock $partition)

		msg "- Backup: $mtdblock to file $filename ---"
		backup_partition_to_file $mtdblock $backup_dir_path/$filename || { msg "Backup $partition partition $mtdblock to $filename failed" ; exit_init ; }
	done
	kill $blue_led_pid
else
	msg "backup_partitions value is No"
fi


##### RESTORE #####
msg
msg
if [[ "$restore_partitions" == "yes" ]]; then
	msg "restore_partitions value is Yes"

	if [[ ! -d $restore_dir_path ]]; then
		{ msg "$restore_dir_path directory is missing" ; exit_init ; }
	else
		msg "$restore_dir_path directory is found"
	fi

	cp -r $restore_dir_path /$restore_dir_name
	cd /$restore_dir_name

	/blink_red_led.sh &
	red_led_pid="$!"
	msg
	msg "---------- Begin of restore operations ----------"
	for partition in kernel rootfs app kback aback cfg para; do
		filename=$(get_filename $partition)
		mtd=$(get_mtd $partition)
		restore_opt_value=$(get_restore_opt_value $partition)

		msg "- Restore: $mtd from file $filename"
		if [[ "$restore_opt_value" == "yes" ]]; then

			msg " + restore_$partition value is Yes"
			restore_file_to_partition $filename $mtd || { msg "Restore $filename to $partition partition $mtd failed" ; exit_init ; }
		else
			msg " + restore_$partition value is No"
		fi
		msg
	done
	kill $red_led_pid
else
	msg "restore_partitions value is No"
fi


##### CUSTOM SCRIPT #####
msg
msg
msg "custom_script is set to \"$custom_script\""
if [[ -f /sdcard/$custom_script ]]; then
	msg "Custom script is found"
	if [[ "$dry_run" == "yes" ]]; then
		msg "Custom script does not run when dry mode is active"
	else
		msg "Executing custom script"
		/sdcard/$custom_script || { msg "Custom script did not run properly" ; exit_init ; }
	fi
else
	msg "Custom script is missing"
fi

exit_init
